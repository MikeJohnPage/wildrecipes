[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wild recipes",
    "section": "",
    "text": "Welcome\nThe title for this book is inspired by Russ Roberts book, Wild Problems. In this books he describes a class of problem he calls ‘wild problems’. These are big life decisions (e.g., should I move country) where an algorithmic approach to solving them, such as using a cost-benefit analysis, often fails. Instead he proposes a new framework to tackle these problems. (I will leave the curious reader to discover more on their own)\nMuch like the ‘wild problems’ discussed in Roberts’ book, the R programmer also faces a class of coding problem which could be described as wild. That is, a set of problems found outside of a controlled environment such as a classroom or textbook and instead found in an environment which is uncontrolled and wild. Here, the examples found elsewhere often fail, or require a more complex workaround. This could be due to underlying bugs in R or its libraries, poor documentation, or quite simply and most often the case, the complexity of the problem space you are working in doesn’t map easily to materials found elsewhere.\nThis book is a collection of recipes to some of these wild coding problems I’ve experienced in my work as an R programmer. It is by no means exhausative. Nor is it entriely unique. Indeed, a plethora of resources already exist in this area and this book even rehashes some of these (e.g., Stack Overflow, Posit Community, etc.). This book has primarily been created as a means for myself to document problems I’ve faced and the wild recipes I’ve implemented along the way. My hope is these recipes might also help you too."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "structure.html",
    "href": "structure.html",
    "title": "Book structure",
    "section": "",
    "text": "This book is not designed to be read from cover to cover. Instead it is written as a collection of individual recipes. Inspired by Tidy design principles, each recipe can be read in isolation and will cover:\n\nWhat is the problem?\nWhat is an example?\nWhat is a solution?\n\nOccasionally, recipes will also cover:\n\nWhat other solutions exist?"
  },
  {
    "objectID": "annotations-sizes.html#what-is-the-problem",
    "href": "annotations-sizes.html#what-is-the-problem",
    "title": "1  Align annotation sizes",
    "section": "1.1 What is the problem?",
    "text": "1.1 What is the problem?\nWhen adding a text annotation to a plot with ggplot2::annotate(), the size of the text in the annotation does not match other elements on the plot despite setting the size argument to equal values."
  },
  {
    "objectID": "annotations-sizes.html#what-is-an-example",
    "href": "annotations-sizes.html#what-is-an-example",
    "title": "1  Align annotation sizes",
    "section": "1.2 What is an example?",
    "text": "1.2 What is an example?\n\nlibrary(ggplot2)\n\nggplot() +\n  ggtitle(\"This title is size 14\") +\n  theme(plot.title = element_text(size = unit(14, \"pt\"))) +\n  annotate(\n    \"text\",\n    label = \"This annotation is size 14\",\n    x = 0, y = 0,\n    size = unit(14, \"pt\")\n  )"
  },
  {
    "objectID": "annotations-sizes.html#what-is-the-solution",
    "href": "annotations-sizes.html#what-is-the-solution",
    "title": "1  Align annotation sizes",
    "section": "1.3 What is the solution?",
    "text": "1.3 What is the solution?\nTo align the sizes of annotations and other elements on the plot, annotation sizes must be divided by .pt:\n\nggplot() +\n  ggtitle(\"This title is size 14\") +\n  theme(plot.title = element_text(size = unit(14, \"pt\"))) +\n  annotate(\n    \"text\",\n    label = \"This annotation is size 14\",\n    x = 0, y = 0,\n    size = unit(14, \"pt\") / .pt # divide by .pt\n  )\n\n\n\n\nThis works because annotate() calculates font size by multiplying the specified size by the global variable .pt (equal to 2.845276). See this Stack Overflow post for more information."
  },
  {
    "objectID": "ggplot2-annotations-sizes.html#what-is-the-problem",
    "href": "ggplot2-annotations-sizes.html#what-is-the-problem",
    "title": "1  Annotations: text size",
    "section": "1.1 What is the problem?",
    "text": "1.1 What is the problem?\nWhen adding a text annotation to a plot with ggplot2::annotate(), the size of the text in the annotation does not match other elements on the plot despite setting the size argument to equal values."
  },
  {
    "objectID": "ggplot2-annotations-sizes.html#what-is-an-example",
    "href": "ggplot2-annotations-sizes.html#what-is-an-example",
    "title": "1  Annotations: text size",
    "section": "1.2 What is an example?",
    "text": "1.2 What is an example?\n\nlibrary(ggplot2)\n\nggplot() +\n  ggtitle(\"This title is size 14\") +\n  theme(plot.title = element_text(size = unit(14, \"pt\"))) +\n  annotate(\n    \"text\",\n    label = \"This annotation is size 14\",\n    x = 0, y = 0,\n    size = unit(14, \"pt\")\n  )"
  },
  {
    "objectID": "ggplot2-annotations-sizes.html#what-is-the-solution",
    "href": "ggplot2-annotations-sizes.html#what-is-the-solution",
    "title": "1  Annotations: text size",
    "section": "1.3 What is the solution?",
    "text": "1.3 What is the solution?\nTo align the sizes of annotations and other elements on the plot, annotation sizes must be divided by .pt:\n\nggplot() +\n  ggtitle(\"This title is size 14\") +\n  theme(plot.title = element_text(size = unit(14, \"pt\"))) +\n  annotate(\n    \"text\",\n    label = \"This annotation is size 14\",\n    x = 0, y = 0,\n    size = unit(14, \"pt\") / .pt # divide by .pt\n  )\n\n\n\n\nThis works because annotate() calculates font size by multiplying the specified size by the global variable .pt (equal to 2.845276). See this Stack Overflow post for more information."
  },
  {
    "objectID": "gglot2-annotations-positions.html#what-is-the-problem",
    "href": "gglot2-annotations-positions.html#what-is-the-problem",
    "title": "2  Annotations: infinite positions",
    "section": "2.1 What is the problem?",
    "text": "2.1 What is the problem?\nTo position annotations at the edge of a plot, the values Inf and -Inf can be passed to the positioning aesthetics (e.g., x) of ggplot2::annotation(). This technique fails for scales that are of class Date."
  },
  {
    "objectID": "gglot2-annotations-positions.html#what-is-an-example",
    "href": "gglot2-annotations-positions.html#what-is-an-example",
    "title": "2  Annotations: infinite positions",
    "section": "2.2 What is an example?",
    "text": "2.2 What is an example?\nIt is useful to first see how we can position annotations on scales which aren’t dates. For example, using the built-in economics dataset of ggplot2, we can postion an annotation in the top-right corner of the plot like so:\n\nlibrary(ggplot2)\n\nggplot(economics, aes(x = pop, y = unemploy)) +\n  geom_point() +\n  annotate(\n    \"text\",\n    label = \"Top-right\",\n    vjust = 1, hjust = 1, # Prevent text being chopped\n    x = Inf, y = Inf\n  )\n\n\n\n\nWhen we try the same approach to a scale that uses dates, we get an error:\n\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_point() +\n  annotate(\n    \"text\",\n    label = \"Top-right\",\n    vjust = 1, hjust = 1, # Prevent text being chopped\n    x = Inf, y = Inf\n  )\n\nError: Invalid input: date_trans works with objects of class Date only"
  },
  {
    "objectID": "gglot2-annotations-positions.html#what-is-a-soltuion",
    "href": "gglot2-annotations-positions.html#what-is-a-soltuion",
    "title": "2  Annotations: infinite positions",
    "section": "2.3 What is a soltuion?",
    "text": "2.3 What is a soltuion?\nTo plot an annotation at the edge of a scale of class Date, you should change the class of Inf to a Date class:\n\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_point() +\n  annotate(\n    \"text\",\n    label = \"Top-right\",\n    vjust = 1, hjust = 1, # Prevent text being chopped\n    x = structure(Inf, class = \"Date\"), y = Inf\n  )\n\n\n\n\nSee this GitHub issue for more information."
  },
  {
    "objectID": "ggplot2-annotations-sizes.html#what-is-a-solution",
    "href": "ggplot2-annotations-sizes.html#what-is-a-solution",
    "title": "1  Annotations: text size",
    "section": "1.3 What is a solution?",
    "text": "1.3 What is a solution?\nTo align the sizes of annotations and other elements on the plot, annotation sizes must be divided by .pt:\n\nggplot() +\n  ggtitle(\"This title is size 14\") +\n  theme(plot.title = element_text(size = unit(14, \"pt\"))) +\n  annotate(\n    \"text\",\n    label = \"This annotation is size 14\",\n    x = 0, y = 0,\n    size = unit(14, \"pt\") / .pt # divide by .pt\n  )\n\n\n\n\nThis works because annotate() calculates font size by multiplying the specified size by the global variable .pt (equal to 2.845276). See this Stack Overflow post for more information."
  }
]