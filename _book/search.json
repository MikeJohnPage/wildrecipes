[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wild recipes",
    "section": "",
    "text": "Welcome\nThe title for this book is inspired by Russ Roberts book, Wild Problems. In this books he describes a class of problem he calls ‘wild problems’. These are big life decisions (e.g., should I move country) where an algorithmic approach to solving them, such as using a cost-benefit analysis, often fails. Instead he proposes a new framework to tackle these problems. (I will leave the curious reader to discover more on their own)\nMuch like the ‘wild problems’ discussed in Roberts’ book, the R programmer also faces a class of problem which could be described as wild. That is, when implementing solutions to problems outside of a sandboxed envrionment (e.g., the classroom, a toy example), the examples found in textbooks and documentation often fail, or require a more complex workaround. This could be due to bugs in the underlying libraries or code, or the complexity of the problem requiring something more than the simplistic examples documented elsewhere.\nThis book is a collection of recipes to some of these wild coding problems I’ve experienced in my work as an R programmer. It is by no means exhausative. Indeed, a plethora of resources already exist in this area (e.g., Stack Overflow, Posit Community, etc.). While the book has initially been created as a medium for me to document these problems for future reference, the book has been published in the open, in the hope some of the recipes help you solve problems you are facing."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "structure.html",
    "href": "structure.html",
    "title": "Book structure",
    "section": "",
    "text": "This book is not designed to be read from cover to cover. Instead it is written as a collection of individual recipes. Inspired by Tidy design principles each recipe can be read in isolation and will cover:\n\nWhat is the problem?\nWhat is an example?\nWhat is the solution?"
  },
  {
    "objectID": "annotations-sizes.html#what-is-the-problem",
    "href": "annotations-sizes.html#what-is-the-problem",
    "title": "1  Align annotation sizes",
    "section": "1.1 What is the problem?",
    "text": "1.1 What is the problem?\nWhen adding a text annotation to a plot with ggplot2::annotate(), the size of the text in the annotation does not match other elements on the plot despite setting the size argument to equal values."
  },
  {
    "objectID": "annotations-sizes.html#what-is-an-example",
    "href": "annotations-sizes.html#what-is-an-example",
    "title": "1  Align annotation sizes",
    "section": "1.2 What is an example?",
    "text": "1.2 What is an example?\n\nlibrary(ggplot2)\n\nggplot() +\n  ggtitle(\"This title is size 14\") +\n  theme(plot.title = element_text(size = unit(14, \"pt\"))) +\n  annotate(\n    \"text\",\n    label = \"This annotation is size 14\",\n    x = 0, y = 0,\n    size = unit(14, \"pt\")\n  )"
  },
  {
    "objectID": "annotations-sizes.html#what-is-the-solution",
    "href": "annotations-sizes.html#what-is-the-solution",
    "title": "1  Align annotation sizes",
    "section": "1.3 What is the solution?",
    "text": "1.3 What is the solution?\nTo align the sizes of annotations and other elements on the plot, annotation sizes must be divided by .pt:\n\nggplot() +\n  ggtitle(\"This title is size 14\") +\n  theme(plot.title = element_text(size = unit(14, \"pt\"))) +\n  annotate(\n    \"text\",\n    label = \"This annotation is size 14\",\n    x = 0, y = 0,\n    size = unit(14, \"pt\") / .pt # divide by .pt\n  )\n\n\n\n\nThis works because annotate() calculates font size by multiplying the specified size by the global variable .pt (equal to 2.845276). See this Stack Overflow post for more information."
  }
]