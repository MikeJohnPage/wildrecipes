[
  {
    "objectID": "utilities-consecutive-trues.html",
    "href": "utilities-consecutive-trues.html",
    "title": "5  Consecutive true values",
    "section": "",
    "text": "5.1 What is the problem?\nFor a column of logical values in a data frame, count of the number of consecutive TRUE values at the given point in the column. NA values should return NA and reset the count.",
    "crumbs": [
      "Utilities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Consecutive true values</span>"
    ]
  },
  {
    "objectID": "utilities-consecutive-trues.html#what-is-an-example",
    "href": "utilities-consecutive-trues.html#what-is-an-example",
    "title": "5  Consecutive true values",
    "section": "5.2 What is an example?",
    "text": "5.2 What is an example?\nFor the data frame:\n\ndf &lt;- tibble::tibble(x = c(TRUE, TRUE, NA, TRUE, FALSE, TRUE, TRUE, TRUE))\n\nThe following data frame should be returned:\n\n\n# A tibble: 8 × 2\n  x     consecutive_trues\n  &lt;lgl&gt;             &lt;dbl&gt;\n1 TRUE                  2\n2 TRUE                  1\n3 NA                   NA\n4 TRUE                  1\n5 FALSE                 0\n6 TRUE                  3\n7 TRUE                  2\n8 TRUE                  1",
    "crumbs": [
      "Utilities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Consecutive true values</span>"
    ]
  },
  {
    "objectID": "utilities-consecutive-trues.html#what-is-a-solution",
    "href": "utilities-consecutive-trues.html#what-is-a-solution",
    "title": "5  Consecutive true values",
    "section": "5.3 What is a solution?",
    "text": "5.3 What is a solution?\nWe can leverage the dplyr::consecutive_id() function to create unique group id’s, and then create sequences along these id’s:\n\nlibrary(tibble)\nlibrary(dplyr)\n\ndf |&gt;\n  mutate(id = consecutive_id(x)) |&gt;\n  add_count(id) |&gt;\n  mutate(consecutive_trues = seq(n(), 1), .by = id) |&gt;\n  mutate(\n    consecutive_trues = case_when(\n      is.na(x) ~ NA_integer_,\n      x ~ consecutive_trues,\n      .default = 0\n    )\n  ) |&gt;\n  select(-id, -n)\n\n# A tibble: 8 × 2\n  x     consecutive_trues\n  &lt;lgl&gt;             &lt;dbl&gt;\n1 TRUE                  2\n2 TRUE                  1\n3 NA                   NA\n4 TRUE                  1\n5 FALSE                 0\n6 TRUE                  3\n7 TRUE                  2\n8 TRUE                  1\n\n\nTo reverse the order of the count of TRUE values, that is, to count the number of trailing TRUE values, the order of the sequence can simply be switched.",
    "crumbs": [
      "Utilities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Consecutive true values</span>"
    ]
  },
  {
    "objectID": "utilities-consecutive-trues.html#what-are-alternate-solutions",
    "href": "utilities-consecutive-trues.html#what-are-alternate-solutions",
    "title": "5  Consecutive true values",
    "section": "5.4 What are alternate solutions?",
    "text": "5.4 What are alternate solutions?\nFor a generalised solution that works with any vector, outside the context of a data frame:\n\nconsecutive_trues &lt;- function(x) {\n  result &lt;- integer(length(x))\n  current_total &lt;- 0\n\n  for (i in seq_along(x)) {\n    if (is.na(x[i])) {\n      result[i] &lt;- NA_integer_\n      current_total &lt;- 0\n    } else if (x[i]) {\n      j &lt;- i\n      while (isTRUE(x[j])) {\n        current_total &lt;- current_total + 1\n        j &lt;- j + 1\n      }\n      result[i] &lt;- current_total\n      current_total &lt;- 0\n    } else {\n      current_total &lt;- 0\n      result[i] &lt;- current_total\n    }\n  }\n\n  return(result)\n}",
    "crumbs": [
      "Utilities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Consecutive true values</span>"
    ]
  },
  {
    "objectID": "ggplot2-panel-sizes.html",
    "href": "ggplot2-panel-sizes.html",
    "title": "4  Panel sizes",
    "section": "",
    "text": "4.1 What is the problem?\nThere is no default method to set the panel size of a plot in ggplot2, only a method to set the plot size using the width and height paramaeters of ggplot2::ggsave(). The panel refers to the inner plotting window that contains the data, and the plot refers to the whole plotting window that contains both the panel and all other elements (e.g., legeneds, labels, etc.):",
    "crumbs": [
      "ggplot2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Panel sizes</span>"
    ]
  },
  {
    "objectID": "ggplot2-panel-sizes.html#what-is-a-solution",
    "href": "ggplot2-panel-sizes.html#what-is-a-solution",
    "title": "4  Panel sizes",
    "section": "4.2 What is a solution?",
    "text": "4.2 What is a solution?\nThe ggh4x::force_panelsizes() function can be used to coerce a single panel to a set size:\n\nlibrary(ggplot2)\n\nggplot(economics, aes(x = pop, y = unemploy)) +\n  geom_point() +\n  ggh4x::force_panelsizes(\n    rows = unit(8, \"cm\"),\n    cols = unit(12, \"cm\")\n  )",
    "crumbs": [
      "ggplot2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Panel sizes</span>"
    ]
  }
]